unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.ComCtrls, Winapi.ShellAPI, UniProvider, SQLiteUniProvider, DBAccess, Uni, Data.DB, CREncryption,
  MemDS, System.IniFiles, RegExpr, System.RegularExpressions,
  Vcl.Imaging.pngimage, DASQLMonitor, UniSQLMonitor, System.SyncObjs, System.Diagnostics,
  siComp;

type
  TForm1 = class(TForm)
    img_stop: TImage;
    img_play: TImage;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    StatusBar1: TStatusBar;
    CheckBox1: TCheckBox;
    Label6: TLabel;
    Label7: TLabel;
    img_load: TImage;
    Timer1: TTimer;
    Label8: TLabel;
    CheckBox2: TCheckBox;
    Label9: TLabel;
    UniSQLMonitor1: TUniSQLMonitor;
    Label10: TLabel;
    WorkTimer: TTimer;
    Label11: TLabel;
    Label12: TLabel;
    img_search: TImage;
    siLang1: TsiLang;
    Button1: TButton;
    Button2: TButton;
    procedure Label6Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure img_loadClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure CheckBox2Click(Sender: TObject);
    procedure CheckBox1Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure img_playClick(Sender: TObject);
    procedure img_stopClick(Sender: TObject);
    procedure WorkTimerTimer(Sender: TObject);
    procedure Label12Click(Sender: TObject);
    procedure img_searchClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

type
  Th = class(TThread)
  private
    ResultFolder: WideString;
    TempList, AddList: TStringList;
    FileName: WideString;
    ResultPatchDir: WideString;
    Connect: TUniConnection;
    SQL: TUniQuery;
    CS: TCriticalSection;
  protected
    procedure Execute; override;
    // constructor Create(CreateSuspendet: Boolean; FilePatchName, ResultFolder: WideString);
    constructor Create(CreateSuspendet: Boolean; FilePatchName: WideString);
    destructor Destroy; override;
    function CheckRegExpr(line :string): Boolean;
    function GetCheckedLine(line: string): string;
    procedure CheckLinsDB(out base: TStringList);
    procedure AddLinsDB(out base: TStringList);
    procedure CreateFolders;
    procedure ReCreateConnect;
  end;

type
  Download = class(TThread)
  private
   FileName: WideString;
  protected
    procedure Execute; override;
    constructor Create(CreateSuspendet: Boolean; FilePatchName: WideString);
    destructor Destroy; override;
    function CheckRegExpr(line :string): Boolean;
    function GetCheckedLine(line: string): string;
  end;

type
  Stats = class(TObject)
  public
   iPrivateList, iPublicList: Int64;
   GoodLine, BadLine, NextLine, MaxLine, ProgressLine: Int64;
   CountDataBase: Int64;
  private
//    constructor Create;
  protected
   constructor Create;
   procedure ReStartConf;
   procedure ReStartThread;
   procedure GetCountAP;
   function ReformData(s: string): string;
  end;

var
  Form1: TForm1;
  ThreadWork: boolean;
  Statistic: Stats;
  TypeIndex: Integer;
  db_name: string;
  SkipVerifyFile: Integer;
  CheckDB: Integer;
  GlobalFileName: WideString;
  WorkTime: TStopWatch;
  Language: Int32;
  procedure ChangeLanguage;
//  procedure CheckCountDB;


const CountCheck = 10000;



implementation

{$R *.dfm}

uses Unit2, Unit3;

//procedure CheckCountDB;
//var Connect: TUniConnection;
//    SQL: TUniQuery;
//begin
// Connect:=TUniConnection.Create(nil);
// SQL:=TUniQuery.Create(nil);
// Connect.ProviderName:='SQLite';
// Connect.Database:=ExtractFilePath(ParamStr(0))+'antipublic.db';
// Connect.Connect;
// SQL.Connection:=Connect;
// SQL.SQL.Text:='SELECT COUNT(*) FROM data';
// SQL.Open;
// Statistic.CountDataBase:=SQL.Fields[0].AsInteger;
// Form1.Label1.Caption:='База антипаблика: '+Statistic.CountDataBase.ToString;
// FreeAndNil(Connect);
// FreeAndNil(SQL);
//end;

procedure ChangeLanguage;
begin
 case Language of
  1:  begin

      end;
  2:  begin

      end;
 end;

end;

procedure TForm1.Button1Click(Sender: TObject);
begin
 Form1.siLang1.ActiveLanguage:=2;
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
 Form1.siLang1.ActiveLanguage:=1;
end;

procedure TForm1.CheckBox1Click(Sender: TObject);
begin
 if Form1.CheckBox1.Checked then CheckDB:=0 else CheckDB:=-1;
end;

procedure TForm1.CheckBox2Click(Sender: TObject);
begin
 if Form1.CheckBox2.Checked then SkipVerifyFile:=-1 else SkipVerifyFile:=0;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
 Statistic:=Stats.Create;
end;

procedure TForm1.FormDestroy(Sender: TObject);
var INI: Tinifile;
begin
 INI:=TiniFile.Create(extractfilepath(paramstr(0))+'settings.ini');
 Ini.WriteInteger('CONF', 'TypeIndex', TypeIndex);
 Ini.WriteInteger('CONF', 'CheckDB', CheckDB);
 Ini.WriteInteger('CONF', 'SkipVerifyFile', SkipVerifyFile);
 Ini.WriteString('CONF', 'db_name', 'antipublic.db');
 Ini.WriteInteger('CONF', 'Language', Language);
 FreeAndNil(INI);
end;

procedure TForm1.FormShow(Sender: TObject);
var INI: TIniFile;
    TS: TSTringList;
begin
 if not FileExists('settings.ini') then
 begin
  TS:=TStringList.Create;
  TS.SaveToFile(ExtractFilePath(Application.ExeName)+'settings.ini');
  FreeAndNil(TS);
 end;

 INI:=TiniFile.Create(extractfilepath(paramstr(0))+'settings.ini');
 TypeIndex:=INI.ReadInteger('CONF','TypeIndex', -1);
 {
    -1: - вывод модального окна
     0: - индекс на email
     2: - индекс на email+password
 }
 db_name:=INI.ReadString('CONF','db_name', 'antipublic.db');
 CheckDB:=INI.ReadInteger('CONF','CheckDB', -1);
 {
    -1: не записывать в базу данных
     0: записывать в базу данных
 }
 SkipVerifyFile:=INI.ReadInteger('CONF','SkipVerifyFile', -1);
 {
    -1: не записывать RAW файл для работы потом
     0: вести запись RAW файла
 }
 TypeIndex:=INI.ReadInteger('CONF','TypeIndex', -1);
 Language:=INI.ReadInteger('CONF','Language', 1);
 FreeAndNil(INI);

  if SkipVerifyFile = -1  then Form1.CheckBox2.Checked:=True else Form1.CheckBox2.Checked:=False;
  if CheckDB = 0 then Form1.CheckBox1.Checked:=True else Form1.CheckBox1.Checked:=False;

 if not FileExists('antipublic.db') then
 begin
  Form2.Show;
 end else
 begin
  Statistic.GetCountAP;
 end;

end;

procedure TForm1.img_loadClick(Sender: TObject);
var Open: TOpenDialog;
begin
 Open:=TOpenDialog.Create(nil);
 if Open.Execute then
 begin
  Statistic.ReStartConf;
  GlobalFileName:=Open.FileName;
  if SkipVerifyFile = 0 then Download.Create(False, Open.FileName) else
  Form1.Label2.Caption:=Form1.siLang1.GetTextOrDefault('IDS_25' (* 'База данных: неизвестно' *) );
 end;
 FreeAndNil(Open);
 Statistic.GetCountAP;

 Form1.Label12.Caption:=ExtractFileName(GlobalFileName);
// ShowMessage(ExtractFileName(GlobalFileName));
end;

procedure TForm1.img_playClick(Sender: TObject);
begin
 if Length(GlobalFileName) < 2 then
 begin
  MessageDlg(Form1.siLang1.GetTextOrDefault('IDS_26' (* 'Вы не загрузили базу данных. ' *) )+#10#13+Form1.siLang1.GetTextOrDefault('IDS_27' (* 'Вы не можете продолжить.' *) ), mtError, [mbOk], 0);
 end else
 begin
  Statistic.GetCountAP;
  ThreadWork:=True;
  Statistic.ReStartThread;
  Th.Create(False, GlobalFileName);  // не добавлять третий параметр. Попробовать вернуть все как было
 end;
end;

procedure TForm1.img_searchClick(Sender: TObject);
begin
 Form3.Show;
 Form1.Enabled:=False;
end;

procedure TForm1.img_stopClick(Sender: TObject);
begin
 ThreadWork:=False;
end;

procedure TForm1.Label12Click(Sender: TObject);
begin
 ShellExecute(handle,'open', PWideChar(ExtractFilePath(GlobalFileName)),nil,nil,SW_SHOW);
end;

procedure TForm1.Label6Click(Sender: TObject);
begin
 ShellExecute(handle,'open', 'https://dark-time.com/threads/36155/', nil, nil, SW_SHOW);
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
 Form1.Label1.Caption:='База антипаблика: '+Statistic.ReformData(Statistic.CountDataBase.ToString);
 if SkipVerifyFile = 0 then Form1.Label2.Caption:=siLang1.GetTextOrDefault('IDS_32' (* 'База данных: ' *) )+Statistic.ReformData(Statistic.MaxLine.ToString)
  else Form1.Label2.Caption:=siLang1.GetTextOrDefault('IDS_25' (* 'База данных: неизвестно' *) );
 Form1.Label3.Caption:=siLang1.GetTextOrDefault('IDS_34' (* 'Прогресс: ' *) )+Statistic.ReformData(Statistic.ProgressLine.ToString) +' / '+Statistic.ReformData(Statistic.GoodLine.ToString);
 Form1.Label4.Caption:=siLang1.GetTextOrDefault('IDS_35' (* 'Паблик: ' *) )+Statistic.ReformData(Statistic.iPublicList.ToString);
 Form1.Label5.Caption:=siLang1.GetTextOrDefault('IDS_36' (* 'Приват: ' *) )+Statistic.ReformData(Statistic.iPrivateList.ToString);
 Form1.Label7.Caption:=siLang1.GetTextOrDefault('IDS_37' (* 'Неверные строки: ' *) )+Statistic.ReformData(Statistic.BadLine.ToString);
 Form1.Label8.Caption:=siLang1.GetTextOrDefault('IDS_38' (* 'Правильные строки: ' *) )+Statistic.ReformData(Statistic.GoodLine.ToString);
end;

procedure TForm1.WorkTimerTimer(Sender: TObject);
begin
 Form1.Label10.Caption:=siLang1.GetTextOrDefault('IDS_39' (* 'Время выполнения: ' *) )+WorkTime.Elapsed.ToString;
end;

{ Th }

constructor Th.Create(CreateSuspendet: Boolean; FilePatchName: WideString);
begin
 inherited Create(CreateSuspendet);
 Priority:=tpHigher;
 FreeOnTerminate:=True;
 AddList:=TStringList.Create;
 TempList:=TStringList.Create;
 FileName:=FilePatchName;
 CS:=TCriticalSection.Create;
// ShowMessage(FileName);
 Form1.Timer1.Enabled:=True;
 CreateFolders;

 Form1.img_stop.Enabled:=True;
 Form1.img_play.Enabled:=False;
 Form1.img_load.Enabled:=False;
 Form1.img_search.Enabled:=False;

 SQL:=TUniQuery.Create(nil);
 Connect:=TUniConnection.Create(nil);
 Connect.ProviderName:='SQLite';
 Connect.Database:=ExtractFilePath(ParamStr(0))+'antipublic.db';
 Connect.Connect;
 Connect.ExecSQL('PRAGMA page_size = 65536');
 Connect.ExecSQL('PRAGMA synchronous = 0');
 Connect.ExecSQL('PRAGMA journal_mode = OFF');
 Connect.ExecSQL('PRAGMA temp_store = MEMORY'); // FILE  MEMORY
// Connect.ExecSQL('PRAGMA auto_vacuum = FULL');
 Connect.ExecSQL('PRAGMA auto_vacuum = FULL');
 Connect.ExecSQL('PRAGMA cache_size = 256000');
 SQL.Connection:=Connect;

 WorkTime:=TStopwatch.StartNew;
 WorkTime.Start;
 Form1.Label10.Caption:=Form1.siLang1.GetTextOrDefault('IDS_39' (* 'Время выполнения: ' *) )+WorkTime.Elapsed.ToString;
 Form1.WorkTimer.Enabled:=True;
end;

destructor Th.Destroy;
begin
 SQL.SQL.Text:='SELECT COUNT(*) FROM data';
 SQL.Open;
 Statistic.CountDataBase:=SQL.Fields[0].AsInteger;
// Form1.Label1.Caption:='База антипаблика: '+Statistic.CountDataBase.ToString;

 FreeAndNil(AddList);
 FreeAndNil(TempList);
 CS.Enter;
 Form1.Timer1.Enabled:=False;
 Form1.Label1.Caption:=Form1.siLang1.GetTextOrDefault('IDS_31' (* 'База антипаблика: ' *) )+Statistic.ReformData(Statistic.CountDataBase.ToString);
 if SkipVerifyFile = 0 then Form1.Label2.Caption:=Form1.siLang1.GetTextOrDefault('IDS_32' (* 'База данных: ' *) )+Statistic.ReformData(Statistic.MaxLine.ToString)
  else Form1.Label2.Caption:=Form1.siLang1.GetTextOrDefault('IDS_25' (* 'База данных: неизвестно' *) );

// Form1.Label2.Caption:='База данных: '+Statistic.ReformData(Statistic.MaxLine.ToString);
 Form1.Label3.Caption:=Form1.siLang1.GetTextOrDefault('IDS_34' (* 'Прогресс: ' *) )+Statistic.ReformData(Statistic.ProgressLine.ToString) +' / '+Statistic.ReformData(Statistic.GoodLine.ToString);
 Form1.Label4.Caption:=Form1.siLang1.GetTextOrDefault('IDS_35' (* 'Паблик: ' *) )+Statistic.ReformData(Statistic.iPublicList.ToString);
 Form1.Label5.Caption:=Form1.siLang1.GetTextOrDefault('IDS_36' (* 'Приват: ' *) )+Statistic.ReformData(Statistic.iPrivateList.ToString);
 Form1.Label7.Caption:=Form1.siLang1.GetTextOrDefault('IDS_37' (* 'Неверные строки: ' *) )+Statistic.ReformData(Statistic.BadLine.ToString);
 Form1.Label8.Caption:=Form1.siLang1.GetTextOrDefault('IDS_38' (* 'Правильные строки: ' *) )+Statistic.ReformData(Statistic.GoodLine.ToString);
 Form1.img_stop.Enabled:=False;
 Form1.img_play.Enabled:=True;
 Form1.img_load.Enabled:=True;
 Form1.img_search.Enabled:=True;
 Form1.WorkTimer.Enabled:=False;
 WorkTime.Stop;
 Form1.Label10.Caption:=Form1.siLang1.GetTextOrDefault('IDS_39' (* 'Время выполнения: ' *) )+WorkTime.Elapsed.ToString;
 CS.Leave;
// Statistic.GetCountAP;


 FreeAndNil(SQL);
 FreeAndNil(Connect);
 FreeAndNil(CS);


 inherited;
end;

procedure Th.Execute;
var tempString: string;
    data: TextFile;
    F: TextFile;
begin
 inherited;
  AssignFile(data, FileName);
  Reset(data);

 while not EOF(data) and ThreadWork = True do
 begin
  ReadLn(data, tempString);
  if CheckRegExpr(tempString) then
  begin
   TempList.Add(GetCheckedLine(tempString));
   CS.Enter;
    Inc(Statistic.GoodLine);
   CS.Leave;
   if CountCheck = TempList.Count then
   begin
   // ShowMessage('');
    CheckLinsDB(TempList);
    TempList.Clear;
    // чек в антипаблике
   end else
   begin
    // сделать overload метод, если дата есть, но не было отправки
   end;


   //if SkipVerifyFile = 0 then WriteLn(raw, GetCheckedLine(tempString));
   //Inc(Statistic.GoodLine);
  end else
  begin
   CS.Enter;
    Inc(Statistic.BadLine);
   CS.Leave;

   AssignFile(F, ExtractFilePath(Application.ExeName)+ResultFolder+'/Error data (Dark-Time.Com).txt');
   Append(F);
   WriteLn(F, tempString);
   CloseFile(F);


  end;
  //CS.Enter;
   //Inc(Statistic.MaxLine);
  //CS.Leave;

//  if CountClear = iReCreateConnect then
//  begin
//   ReCreateConnect;
//   iReCreateConnect:=0;
//  end;



 end;
// Form1.Memo1.Lines.Add(TempList.Text);

 if TempList.Count > 0 then CheckLinsDB(TempList);

// CheckLinsDB(TempList, SQL);
 TempList.Clear;

 CloseFile(data);
end;

{ Stats }

constructor Stats.Create;
begin
 iPrivateList:=0;
 iPublicList:=0;
 NextLine:=-1;
 MaxLine:=0;
 BadLine:=0;
 GoodLine:=0;
 MaxLine:=0;
 ProgressLine:=0;
end;

procedure Stats.ReStartConf;
begin
 iPrivateList:=0;
 iPublicList:=0;
 NextLine:=-1;
 MaxLine:=0;
 BadLine:=0;
 GoodLine:=0;
 MaxLine:=0;
 ProgressLine:=0;
 GetCountAP;
end;

procedure Stats.ReStartThread;
begin
 iPrivateList:=0;
 iPublicList:=0;
// NextLine:=-1;
// MaxLine:=0;
 BadLine:=0;
 GoodLine:=0;
// MaxLine:=0;
 ProgressLine:=0;
 GetCountAP;
end;

procedure Stats.GetCountAP;
var Connect: TUniConnection;
    SQL: TUniQuery;
begin
 Connect:=TUniConnection.Create(nil);
 SQL:=TUniQuery.Create(nil);
 Connect.ProviderName:='SQLite';
 Connect.Database:=ExtractFilePath(ParamStr(0))+ 'antipublic.db';
 Connect.Connect;
 SQL.Connection:=Connect;
 SQL.SQL.Text:='SELECT COUNT(*) FROM data';
 SQL.Open;
 CountDataBase:=SQL.Fields[0].AsInteger;
 Form1.Label1.Caption:=Form1.siLang1.GetTextOrDefault('IDS_31' (* 'База антипаблика: ' *) )+ReformData(CountDataBase.ToString);
 FreeAndNil(Connect);
 FreeAndNil(SQL);
end;

function Stats.ReformData(s: string): string;
var s2: string;
    i, j: Integer;
begin
 j:=-1;
 if s.Length > 3 then
 for I:=s.Length downto 1  do
 begin
  Inc(j);
  if j = 3 then
  begin
   j:=0;
   s2:=s[i]+'.'+s2;
  end else
  begin
   s2:=s[i]+s2;
  end;
  Result:=s2;
 end else Result:=s;

end;

function Th.CheckRegExpr(line :string): Boolean;
var RegEx: TRegEx;
const iType = '[A-z0-9\.\-\_]+@[A-z0-9\.\-\_]{1,25}\.[A-z0-9\.\-\_]{2,10}(:|;)[A-z0-9\.\-\_\*\!\@\^\&\$\#]{3,20}';
begin
 RegEx:=TRegEx.Create(iType);
 if RegEx.IsMatch(line)then
 begin
  Result:=True;
 end else
 begin
  Result:=False;
 end;
end;

function Th.GetCheckedLine(line: string): string;
var RegEx: TRegEx;
    MatchCollection: TMatchCollection;
const iType = '[A-z0-9\.\-\_]+@[A-z0-9\.\-\_]{1,25}\.[A-z0-9\.\-\_]{2,10}(:|;)[A-z0-9\.\-\_\*\!\@\^\&\$\#]{3,20}';
begin
 RegEx:=TRegEx.Create(iType);
 MatchCollection:=RegEx.Matches(line);
 Result:=MatchCollection[0].Value;
end;


procedure Th.CheckLinsDB(out base: TStringList);
var LStringEmail, LStringPassword, email, password: string;
    i: Integer;
    F: TextFile;
begin

 AddList.Clear;
 for I:=0 to base.Count-1 do
 begin
  if Pos(':', base[i]) <> 0 then
  begin
   email:=Copy(base[i], 1, Pos(':', base[i]) - 1);
   password:=Copy(base[i], Pos(':', base[i]) + 1, Length(base[i]));
  end else
  begin
   email:=Copy(base[i], 1, Pos(';', base[i]) - 1);
   password:=Copy(base[i], Pos(';', base[i]) + 1, Length(base[i]));
  end;
//  Form1.Memo1.Lines.Add(email+':'+password);
  SQL.SQL.Clear;
  SQL.SQL.Text:='SELECT * FROM data WHERE email = :email AND password = :password';
  SQL.Params[0].AsString:=email;
  SQL.Params[1].AsString:=password;
  SQL.Open;

  if SQL.Fields[0].AsString <> '' then
  begin
   LStringEmail:=SQL.Fields[0].AsString;
   LStringPassword:=SQL.Fields[1].AsString;
   if (email = LStringEmail) and (password = LStringPassword) then
   begin
    CS.Enter;
     AssignFile(F, ExtractFilePath(Application.ExeName)+ResultFolder+'/Public data (Dark-Time.Com).txt');
     Append(F);
     WriteLn(F, email+':'+password);
     CloseFile(F);
     Inc(Statistic.iPublicList);
     Inc(Statistic.ProgressLine);
    CS.Leave;
   end else
   begin  // есть email, но пароль отличается от вводимого
    CS.Enter;
     AssignFile(F, ExtractFilePath(Application.ExeName)+ResultFolder+'/Private data (Dark-Time.Com).txt');
     Append(F);
     WriteLn(F, email+':'+password);
     CloseFile(F);
    CS.Leave;
    AddList.Add(email+':'+password);
    //Form1.Memo1.Lines.Add(email+':'+password);
    CS.Enter;
     Inc(Statistic.iPrivateList);
     Inc(Statistic.ProgressLine);
    CS.Leave;
   end;
  end else
  begin  // если ничего нет; нет даже email в базе данныхз
   CS.Enter;
    AssignFile(F, ExtractFilePath(Application.ExeName)+ResultFolder+'/Private data (Dark-Time.Com).txt');
    Append(F);
    WriteLn(F, email+':'+password);
    CloseFile(F);
   CS.Leave;
   AddList.Add(email+':'+password);
   //Form1.Memo1.Lines.Add(email+':'+password);
   CS.Enter;
    Inc(Statistic.iPrivateList);
    Inc(Statistic.ProgressLine);
   CS.Leave;
  end;
 end;

 if (CheckDB = 0) and (AddList.Count <> 0) then  AddLinsDB(AddList);
 AddList.Clear;

 {
    AddList
    Тут открыть новую процедуру для записи в базу данных -> AddList
    --
    Не требуется
 }
end;

procedure Th.AddLinsDB(out base: TStringList);
var i: integer;
    email, password: string;
begin

 SQL.SQL.Clear;     SQL.Params.Clear;
 SQL.SQL.Text:='INSERT INTO data(email, password) VALUES (:email, :password)';
 SQL.Params[0].DataType:=ftString;
 SQL.Params[1].DataType:=ftString;
 SQL.Params.ValueCount := base.Count;

 for I := 0 to SQL.Params.ValueCount-1 do
 begin
  if Pos(':', base[i]) <> 0 then
  begin
   email:=Copy(base[i], 1, Pos(':', base[i]) - 1);
   password:=Copy(base[i], Pos(':', base[i]) + 1, Length(base[i]));
  end else
  begin
   email:=Copy(base[i], 1, Pos(';', base[i]) - 1);
   password:=Copy(base[i], Pos(';', base[i]) + 1, Length(base[i]));
  end;

  SQL.Params[0][i].AsString:=email;
  SQL.Params[1][i].AsString:=password;
 end;
 SQL.Execute(base.Count);
end;

procedure Th.CreateFolders;
var temp: string;
    TS: TStringList;
begin
 if not DirectoryExists('results') then CreateDir(ExtractFilePath(Application.ExeName)+ 'results');
 temp:=DateToStr(Now) + '_' + TimeToStr(Now);
 temp:=StringReplace(temp, ':', '.', [rfReplaceAll, rfIgnoreCase]);
 temp:='AntiPublic - Dark-Time.Com [' + temp + ']';
 ResultFolder:='results\'+temp+'\';

 CreateDir(ExtractFilePath(Application.ExeName)+ ResultFolder);
 TS:=TStringList.Create;
 TS.Add('');
 TS.Add(Form1.siLang1.GetTextOrDefault('IDS_75' (* 'Программа реализована бесплатно для форума Dark-Time.Com' *) ));
 TS.Add('');
 TS.SaveToFile(ExtractFilePath(Application.ExeName)+ResultFolder+'/Private data (Dark-Time.Com).txt');
 TS.SaveToFile(ExtractFilePath(Application.ExeName)+ResultFolder+'/Public data (Dark-Time.Com).txt');
 TS.SaveToFile(ExtractFilePath(Application.ExeName)+ResultFolder+'/Error data (Dark-Time.Com).txt');
 FreeAndNil(TS);

end;

procedure Th.ReCreateConnect;
begin
// SQL:=TUniQuery.Create(nil);
// Connect:=TUniConnection.Create(nil);
// Connect.ProviderName:='SQLite';
// Connect.Database:=ExtractFilePath(ParamStr(0))+'antipublic.db';
// Connect.Connect;
// Connect.ExecSQL('PRAGMA page_size = 65536');
// Connect.ExecSQL('PRAGMA synchronous = 0');
// Connect.ExecSQL('PRAGMA journal_mode = OFF');
// Connect.ExecSQL('PRAGMA temp_store = MEMORY'); // FILE  MEMORY
//// Connect.ExecSQL('PRAGMA auto_vacuum = FULL');
// Connect.ExecSQL('PRAGMA auto_vacuum = FULL');
// Connect.ExecSQL('PRAGMA cache_size = 256000');
// SQL.Connection:=Connect;
// FreeAndNil(SQL);
// FreeAndNil(Connect);
//
end;

{ Th }

constructor Download.Create(CreateSuspendet: Boolean; FilePatchName: WideString);
begin
 inherited Create(CreateSuspendet);
 Priority:=tpHigher;
 FreeOnTerminate:=True;
 FileName:=FilePatchName;
 if FileExists('raw') then DeleteFile(ExtractFilePath(Application.ExeName)+'raw');
 Form1.Timer1.Enabled:=True;
 Form1.img_stop.Enabled:=False;
 Form1.img_play.Enabled:=False;
 Form1.img_load.Enabled:=False;
 Form1.img_search.Enabled:=False;

 WorkTime:=TStopwatch.StartNew;
 WorkTime.Start;
 Form1.Label10.Caption:=Form1.siLang1.GetTextOrDefault('IDS_39' (* 'Время выполнения: ' *) )+WorkTime.Elapsed.ToString;
 Form1.WorkTimer.Enabled:=True;

end;

destructor Download.Destroy;
begin
 Form1.Timer1.Enabled:=False;
 Form1.img_stop.Enabled:=True;
 Form1.img_play.Enabled:=True;
 Form1.img_load.Enabled:=True;
 Form1.img_search.Enabled:=True;
 Form1.Label1.Caption:=Form1.siLang1.GetTextOrDefault('IDS_31' (* 'База антипаблика: ' *) )+Statistic.ReformData(Statistic.CountDataBase.ToString);
 Form1.Label2.Caption:=Form1.siLang1.GetTextOrDefault('IDS_32' (* 'База данных: ' *) )+Statistic.ReformData(Statistic.MaxLine.ToString);
 Form1.Label3.Caption:=Form1.siLang1.GetTextOrDefault('IDS_34' (* 'Прогресс: ' *) )+Statistic.ReformData(Statistic.ProgressLine.ToString) +' / '+Statistic.ReformData(Statistic.GoodLine.ToString);
 Form1.Label4.Caption:=Form1.siLang1.GetTextOrDefault('IDS_35' (* 'Паблик: ' *) )+Statistic.ReformData(Statistic.iPublicList.ToString);
 Form1.Label5.Caption:=Form1.siLang1.GetTextOrDefault('IDS_36' (* 'Приват: ' *) )+Statistic.ReformData(Statistic.iPrivateList.ToString);
 Form1.Label7.Caption:=Form1.siLang1.GetTextOrDefault('IDS_37' (* 'Неверные строки: ' *) )+Statistic.ReformData(Statistic.BadLine.ToString);
 Form1.Label8.Caption:=Form1.siLang1.GetTextOrDefault('IDS_38' (* 'Правильные строки: ' *) )+Statistic.ReformData(Statistic.GoodLine.ToString);
 Statistic.GetCountAP;

 Form1.WorkTimer.Enabled:=False;
 WorkTime.Stop;
 Form1.Label10.Caption:=Form1.siLang1.GetTextOrDefault('IDS_39' (* 'Время выполнения: ' *) )+WorkTime.Elapsed.ToString;
 inherited;
end;

procedure Download.Execute;
var base, raw: TextFile;
    tempString: string;
begin
 inherited;
 AssignFile(base, FileName);
 Reset(base);
 while not Eof(base) do
 begin
  ReadLn(base, tempString);
  if CheckRegExpr(tempString) then
  begin
   //if SkipVerifyFile = 0 then WriteLn(raw, GetCheckedLine(tempString));
   Inc(Statistic.GoodLine);
  end else Inc(Statistic.BadLine);
  Inc(Statistic.MaxLine);
 end;
// if SkipVerifyFile = 0 then CloseFile(raw);
 CloseFile(base);
end;

function Download.CheckRegExpr(line :string): Boolean;
var RegEx: TRegEx;
const iType = '[A-z0-9\.\-\_]+@[A-z0-9\.\-\_]{1,25}\.[A-z0-9\.\-\_]{2,10}(:|;)[A-z0-9\.\-\_\*\!\@\^\&\$\#]{3,20}';
begin
 RegEx:=TRegEx.Create(iType);
 if RegEx.IsMatch(line)then
 begin
  Result:=True;
 end else
 begin
  Result:=False;
 end;
end;

function Download.GetCheckedLine(line: string): string;
var RegEx: TRegEx;
    MatchCollection: TMatchCollection;
const iType = '[A-z0-9\.\-\_]+@[A-z0-9\.\-\_]{1,25}\.[A-z0-9\.\-\_]{2,10}(:|;)[A-z0-9\.\-\_\*\!\@\^\&\$\#]{3,20}';
begin
 RegEx:=TRegEx.Create(iType);
 MatchCollection:=RegEx.Matches(line);
 Result:=MatchCollection[0].Value;
end;


end.
